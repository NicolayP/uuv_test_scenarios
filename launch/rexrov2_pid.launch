<!-- 
Starts the [6-DoF PID controller](https://github.com/uuvsimulator/uuv_simulator/blob/master/uuv_control/uuv_trajectory_control/scripts/rov_pid_controller.py) 
node with the configurations for the RexROV 2 vehicle.
The controller's default parameters `Kp`, `Kd` and `Ki`
were optimized using [SMAC](https://github.com/automl/SMAC3).

> **Example**

```
roslaunch uuv_gazebo_worlds ocean_waves.launch
```

```
roslaunch rexrov2_description upload_rexrov2.launch
```

```
roslaunch rexrov2_control start_pid_controller.launch
```
-->
<launch>
    <arg name="uuv_name" default="rexrov2" doc="Namespace of the vehicle to be controller"/>

    <!-- Flag to start recoding a rosbag  -->
    <arg name="record" default="false" doc="Record ROS bag"/>
    
    <arg name="gui_on" default="true" doc="Start Gazebo client and RViz"/>
    <arg name="use_ned_frame" default="false" doc="If true, the reference frame is set to be NED (North-East-Down) instead of Gazebo's default ENU (East-North-Up)"/>

    <arg name="Kp" default="11993.888,11993.888,11993.888,19460.069,19460.069,19460.069" doc="Coefficients for the $K_p$ diagonal matrix"/>
    <arg name="Kd" default="9077.459,9077.459,9077.459,18880.925,18880.925,18880.925" doc="Coefficients for the $K_d$ diagonal matrix"/>
    <arg name="Ki" default="321.417,321.417,321.417,2096.951,2096.951,2096.951" doc="Coefficients for the $K_i$ diagonal matrix"/>

    <arg name="teleop_on" default="false" doc="Start joystick teleop node"/>
    <arg name="joy_id" default="0" doc="ID of the joystick device"/>
    <arg name="axis_yaw" default="0" doc="Joystick mapping for yaw angle input"/>
    <arg name="axis_x" default="4" doc="Joystick mapping for X component of velocity reference input"/>
    <arg name="axis_y" default="3" doc="Joystick mapping for Y component of velocity reference input"/>
    <arg name="axis_z" default="1" doc="Joystick mapping for Z component of velocity reference input"/>
    <arg name="saturation" default="2000"/>

      <!-- This node just reads the trajectory and waypoint topics and publishes
       visualization markers for RViz -->
    <group if="$(arg gui_on)">
        <group ns="$(arg uuv_name)">
        <node pkg="uuv_control_utils"
                type="trajectory_marker_publisher.py"
                name="trajectory_marker_publisher"
                output="screen">
            <remap from="trajectory" to="dp_controller/trajectory"/>
            <remap from="waypoints" to="dp_controller/waypoints"/>
        </node>
        </group>
    </group>

    <node pkg="uuv_trajectory_control"
            type="rov_pid_controller.py"
            name="rov_pid_controller"
            output="screen">
        <!-- Remap necessary topics -->
        <remap from="odom" to="pose_gt"/>
        <remap from="trajectory" to="dp_controller/trajectory"/>
        <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
        <remap from="waypoints" to="dp_controller/waypoints"/>
        <remap from="error" to="dp_controller/error"/>
        <remap from="reference" to="dp_controller/reference"/>
        <remap from="thruster_output" to="thruster_manager/input_stamped"/>
        <!-- Controller parameters -->
        <rosparam subst_value="true">
          saturation: $(arg saturation)
          Kp: [$(arg Kp)]
          Kd: [$(arg Kd)]
          Ki: [$(arg Ki)]
          inertial_frame_id: world
        </rosparam>
      </node>

</launch>
